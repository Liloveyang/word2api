package org.oscarlab.word2api;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class Tools {
	
	private static Set<String> javaApis = new HashSet<String>(Arrays.asList("java.applet",
			"java.awt",
			"java.awt.color",
			"java.awt.datatransfer",
			"java.awt.dnd",
			"java.awt.event",
			"java.awt.font",
			"java.awt.geom",
			"java.awt.im",
			"java.awt.im.spi",
			"java.awt.image",
			"java.awt.image.renderable",
			"java.awt.print",
			"java.beans",
			"java.beans.beancontext",
			"java.io",
			"java.lang",
			"java.lang.annotation",
			"java.lang.instrument",
			"java.lang.invoke",
			"java.lang.management",
			"java.lang.ref",
			"java.lang.reflect",
			"java.math",
			"java.net",
			"java.nio",
			"java.nio.channels",
			"java.nio.channels.spi",
			"java.nio.charset",
			"java.nio.charset.spi",
			"java.nio.file",
			"java.nio.file.attribute",
			"java.nio.file.spi",
			"java.rmi",
			"java.rmi.activation",
			"java.rmi.dgc",
			"java.rmi.registry",
			"java.rmi.server",
			"java.security",
			"java.security.acl",
			"java.security.cert",
			"java.security.interfaces",
			"java.security.spec",
			"java.sql",
			"java.text",
			"java.text.spi",
			"java.time",
			"java.time.chrono",
			"java.time.format",
			"java.time.temporal",
			"java.time.zone",
			"java.util",
			"java.util.concurrent",
			"java.util.concurrent.atomic",
			"java.util.concurrent.locks",
			"java.util.function",
			"java.util.jar",
			"java.util.logging",
			"java.util.prefs",
			"java.util.regex",
			"java.util.spi",
			"java.util.stream",
			"java.util.zip",
			"javax.accessibility",
			"javax.activation",
			"javax.activity",
			"javax.annotation",
			"javax.annotation.processing",
			"javax.crypto",
			"javax.crypto.interfaces",
			"javax.crypto.spec",
			"javax.imageio",
			"javax.imageio.event",
			"javax.imageio.metadata",
			"javax.imageio.plugins.bmp",
			"javax.imageio.plugins.jpeg",
			"javax.imageio.spi",
			"javax.imageio.stream",
			"javax.jws",
			"javax.jws.soap",
			"javax.lang.model",
			"javax.lang.model.element",
			"javax.lang.model.type",
			"javax.lang.model.util",
			"javax.management",
			"javax.management.loading",
			"javax.management.modelmbean",
			"javax.management.monitor",
			"javax.management.openmbean",
			"javax.management.relation",
			"javax.management.remote",
			"javax.management.remote.rmi",
			"javax.management.timer",
			"javax.naming",
			"javax.naming.directory",
			"javax.naming.event",
			"javax.naming.ldap",
			"javax.naming.spi",
			"javax.net",
			"javax.net.ssl",
			"javax.print",
			"javax.print.attribute",
			"javax.print.attribute.standard",
			"javax.print.event",
			"javax.rmi",
			"javax.rmi.CORBA",
			"javax.rmi.ssl",
			"javax.script",
			"javax.security.auth",
			"javax.security.auth.callback",
			"javax.security.auth.kerberos",
			"javax.security.auth.login",
			"javax.security.auth.spi",
			"javax.security.auth.x500",
			"javax.security.cert",
			"javax.security.sasl",
			"javax.sound.midi",
			"javax.sound.midi.spi",
			"javax.sound.sampled",
			"javax.sound.sampled.spi",
			"javax.sql",
			"javax.sql.rowset",
			"javax.sql.rowset.serial",
			"javax.sql.rowset.spi",
			"javax.swing",
			"javax.swing.border",
			"javax.swing.colorchooser",
			"javax.swing.event",
			"javax.swing.filechooser",
			"javax.swing.plaf",
			"javax.swing.plaf.basic",
			"javax.swing.plaf.metal",
			"javax.swing.plaf.multi",
			"javax.swing.plaf.nimbus",
			"javax.swing.plaf.synth",
			"javax.swing.table",
			"javax.swing.text",
			"javax.swing.text.html",
			"javax.swing.text.html.parser",
			"javax.swing.text.rtf",
			"javax.swing.tree",
			"javax.swing.undo",
			"javax.tools",
			"javax.transaction",
			"javax.transaction.xa",
			"javax.xml",
			"javax.xml.bind",
			"javax.xml.bind.annotation",
			"javax.xml.bind.annotation.adapters",
			"javax.xml.bind.attachment",
			"javax.xml.bind.helpers",
			"javax.xml.bind.util",
			"javax.xml.crypto",
			"javax.xml.crypto.dom",
			"javax.xml.crypto.dsig",
			"javax.xml.crypto.dsig.dom",
			"javax.xml.crypto.dsig.keyinfo",
			"javax.xml.crypto.dsig.spec",
			"javax.xml.datatype",
			"javax.xml.namespace",
			"javax.xml.parsers",
			"javax.xml.soap",
			"javax.xml.stream",
			"javax.xml.stream.events",
			"javax.xml.stream.util",
			"javax.xml.transform",
			"javax.xml.transform.dom",
			"javax.xml.transform.sax",
			"javax.xml.transform.stax",
			"javax.xml.transform.stream",
			"javax.xml.validation",
			"javax.xml.ws",
			"javax.xml.ws.handler",
			"javax.xml.ws.handler.soap",
			"javax.xml.ws.http",
			"javax.xml.ws.soap",
			"javax.xml.ws.spi",
			"javax.xml.ws.spi.http",
			"javax.xml.ws.wsaddressing",
			"javax.xml.xpath",
			"org.ietf.jgss",
			"org.omg.CORBA",
			"org.omg.CORBA_2_3",
			"org.omg.CORBA_2_3.portable",
			"org.omg.CORBA.DynAnyPackage",
			"org.omg.CORBA.ORBPackage",
			"org.omg.CORBA.portable",
			"org.omg.CORBA.TypeCodePackage",
			"org.omg.CosNaming",
			"org.omg.CosNaming.NamingContextExtPackage",
			"org.omg.CosNaming.NamingContextPackage",
			"org.omg.Dynamic",
			"org.omg.DynamicAny",
			"org.omg.DynamicAny.DynAnyFactoryPackage",
			"org.omg.DynamicAny.DynAnyPackage",
			"org.omg.IOP",
			"org.omg.IOP.CodecFactoryPackage",
			"org.omg.IOP.CodecPackage",
			"org.omg.Messaging",
			"org.omg.PortableInterceptor",
			"org.omg.PortableInterceptor.ORBInitInfoPackage",
			"org.omg.PortableServer",
			"org.omg.PortableServer.CurrentPackage",
			"org.omg.PortableServer.POAManagerPackage",
			"org.omg.PortableServer.POAPackage",
			"org.omg.PortableServer.portable",
			"org.omg.PortableServer.ServantLocatorPackage",
			"org.omg.SendingContext",
			"org.omg.stub.java.rmi",
			"org.w3c.dom",
			"org.w3c.dom.bootstrap",
			"org.w3c.dom.events",
			"org.w3c.dom.ls",
			"org.w3c.dom.views",
			"org.xml.sax",
			"org.xml.sax.ext",
			"org.xml.sax.helpers"));
	
	private static Set<String> stopwords = new HashSet<String>(Arrays.asList("a",
			"about",
			"above",
			"after",
			"again",
			"against",
			"all",
			"am",
			"an",
			"and",
			"any",
			"are",
			"aren't",
			"as",
			"at",
			"be",
			"because",
			"been",
			"before",
			"being",
			"below",
			"between",
			"both",
			"but",
			"by",
			"can't",
			"cannot",
			"could",
			"couldn't",
			"did",
			"didn't",
			"do",
			"does",
			"doesn't",
			"doing",
			"don't",
			"down",
			"during",
			"each",
			"few",
			"for",
			"from",
			"further",
			"had",
			"hadn't",
			"has",
			"hasn't",
			"have",
			"haven't",
			"having",
			"he",
			"he'd",
			"he'll",
			"he's",
			"her",
			"here",
			"here's",
			"hers",
			"herself",
			"him",
			"himself",
			"his",
			"how",
			"how's",
			"i",
			"i'd",
			"i'll",
			"i'm",
			"i've",
			"if",
			"in",
			"into",
			"is",
			"isn't",
			"it",
			"it's",
			"its",
			"itself",
			"let's",
			"me",
			"more",
			"most",
			"mustn't",
			"my",
			"myself",
			"no",
			"nor",
			"not",
			"of",
			"off",
			"on",
			"once",
			"only",
			"or",
			"other",
			"ought",
			"our",
			"ours",
			"ourselves",
			"out",
			"over",
			"own",
			"same",
			"shan't",
			"she",
			"she'd",
			"she'll",
			"she's",
			"should",
			"shouldn't",
			"so",
			"some",
			"such",
			"than",
			"that",
			"that's",
			"the",
			"their",
			"theirs",
			"them",
			"themselves",
			"then",
			"there",
			"there's",
			"these",
			"they",
			"they'd",
			"they'll",
			"they're",
			"they've",
			"this",
			"those",
			"through",
			"to",
			"too",
			"under",
			"until",
			"up",
			"very",
			"was",
			"wasn't",
			"we",
			"we'd",
			"we'll",
			"we're",
			"we've",
			"were",
			"weren't",
			"what",
			"what's",
			"when",
			"when's",
			"where",
			"where's",
			"which",
			"while",
			"who",
			"who's",
			"whom",
			"why",
			"why's",
			"with",
			"won't",
			"would",
			"wouldn't",
			"you",
			"you'd",
			"you'll",
			"you're",
			"you've",
			"your",
			"yours",
			"yourself",
			"yourselves"));
	
	/**
	 * Check whether an API is a Java core API
	 * @param api	the API, package_name#method_name
	 * @return true or false
	 */
	public static boolean checkJavaApi(String api) {
		int i = api.lastIndexOf("#");
		if (i > 0) {
			api = api.substring(0, i);
		}
		i = api.lastIndexOf(".");
		if (i < 0) {
			return false;
		}
		api = api.substring(0, i);
		return javaApis.contains(api);
	}

	/**
	 * Check whether a word is a stop word
	 * @param word	the word
	 * @return	true or false
	 */
	public static boolean checkStopwords(String word) {
		return stopwords.contains(word);
	}
}
